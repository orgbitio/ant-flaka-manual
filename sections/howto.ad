=== Howto Flaka ===

A chapter with questions and answers about how to do things with Flaka.

==== How to check whether a property is defined? ====


-------------------------------------

 <c:when test=" has.property[name] ">
  ...
 </c:when>

-------------------------------------


==== How to check whether a variable is defined? ====


-------------------------------------

 <c:when test=" has.var[name] ">
  ...
 </c:when>

-------------------------------------


==== How to check whether a reference is defined? ====


-------------------------------------

 <c:when test=" has.reference[name] ">
  ...
 </c:when>

-------------------------------------


==== How to check whether a target is defined? ====


-------------------------------------

 <c:when test=" has.target[name] ">
  ..
 </c:when>

-------------------------------------



==== How to check whether a Macro or Task is defined? ====

To check whether a macro or task exists use test -M as shown below:


-------------------------------------

 <c:when test=" has.task[name] ">
   <echo>either a macro or a task</echo>
 </c:when>

-------------------------------------


To check for a specific taskdef or macrodef, use `has.taskdef` or `has.macrodef`. 


==== How to check whether a property is empty? ====

A property is considered _empty_ if either not defined or consists only of whitespace characters.


-------------------------------------

 <c:when test=" empty property[name] ">
   ..
 </c:notempty>

-------------------------------------



==== How can I dynamically execute a target? ====
Use task run-target to run any target. For example


-------------------------------------

  <c:run-target name="hello" fail="false" />

-------------------------------------


This would execute the target hello if this target exists. Otherwise this task will simply be ignored in case attribute fail is set to false (which is the default). If fail is true, then calling a non-existing target throws an exception. Note that targets and macros are in a different namespace.

==== How do I dynamically execute a macro or task? ====
Use task run-macro for this task.


-------------------------------------

 -- just a normal macro .. 
 <macrodef name="greeting">
  <attribute name="message" />
  <sequential>
   <echo>@{message}</echo>
  </sequential>
 </macrodef>

 -- call it statically
 <greeting message="hello, static" />

 -- or dynamically
 <c:run-macro name="greeting">
   <arg name="message" value="hello, world"/>
 </c:run-macro>

-------------------------------------


Note that there is currently no way to call a macro with elements. Only attributes are supported.


