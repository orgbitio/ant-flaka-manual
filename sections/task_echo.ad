
[[task_echo,echo]]
=== echo ===

Task `<c:echo/>` is an extension of Ant\'s standard `echo` task footnote:[see http://ant.apache.org/manual/Tasks/echo.html] to generate nicly formatted output.  Ant\'s standard `echo` task is rather fragile when it comes to reformatting XML. Here is a simple example where the output dumped is shown on the right side:

-------------------------------------
<echo>foobar</echo>       ; '[echo] foobar'
-------------------------------------

Then, one day you reformat your XML input footnote::[http://xmlsoft.org/xmllint.html[xmlint] is a good choice] ending up in footnote:[In order to visualize space characters, character dot (`.`) is going to be used within this chapter]

-------------------------------------
<echo>                   ; '[echo]'
...foobar                ; '[echo] ...foobar'
</echo>                  ; '[echo]'
-------------------------------------

All of a sudden there are three more space characters in front of `foobar` and, to make matters worse, there are two additional empty lines printed. Compare this output with Flaka\'s `echo`

-------------------------------------
<c:echo>
  foobar                 ; '[c:echo] foobar'
</c:echo>
-------------------------------------

which I believe is what you had in mind. Besides being invariant regarding formatting, `echo` supports other features in helping to generate pretty output.

==== Attributes ====

This tasks supports all attributes inherited from Ant\'s echo task. In addition, further supported attributes are:
[cols="3*15%,55%"]
|=============================
| Attribute | Type    | Default | Description 
| `cs`      | string  | `;`     | The sequence starting a comment-line
| `ics`     | string  | `;`     | The sequence starting a inline-comment
| `cl`      | boolean | `true`  | Whether continuation lines shall be supported
| `ws`      | boolean | `true`  | Whether whitespace shall be stripped off
| `shift`   | string  | ``      | Prefix for each output line
|=============================

==== Elements ====

This task optionally accepts implicit text.

==== Behaviour ====

In an initial step, continuation lines are merged into logical lines. Then any comments are stripped from input. Afterwards, unwanted whitespace characters are removed. The process is illustrated footnote::[Again character dot `.` is used to illustrate a whitespace character with the exception of line ending characters] using the introduction example used above:

------------------------------------
<c:echo>
..foo                ; 'foo'
...bar               ; '.bar'
.baz                 ; 'baz'
</c:echo>
-------------------------------------

The whitespace sequence before the first non-whitespace character is analyzsed: if this sequence does not contain any line-ending characters, no whitespace handling will occur. Otherwise, the number of whitespace characters before the first non-whitespace character and after the last line-ending character is determined. This will be `2` in the example above. Then, the whole printable content is being `left shifted` by this amount. Eventually, the content is trimmed: leading whitespace up and inclusive the first line-ending character as well as the last line-ending character followed by trailing whitespace is removed. This gives then the output shown as above. Notice that `foo` and `baz` are now on the same idendation level by this left-shift. It is possible to perform a `right-shift` of content _after_ the automatic left shift: 

------------------------------------
<c:echo shift="5">
..foo                ; '.....foo'
</c:echo>
-------------------------------------

Attribute `shift` expects a unsigned integral number followed by an optinal arbitrary sequence of characters. This allows for a different _shift_ character sequence as show next:

------------------------------------
<c:echo shift="5> ">
..foobar              ; '> > > > >foobar'
</c:echo>
-------------------------------------

==== Examples ====

Create a single output line consisting of 20 times character `%`:
------------------------------------
<c:echo shift="20%" />   ; '%%%%%%%%%%%%%%%%%%%%'
-------------------------------------

Type a comment in echo to document what will be echoed:

------------------------------------
<c:echo>
  ; make sure that property p is defined here
  p : ${p}         ; 'p : ..'
</c:echo>
-------------------------------------

Follow the guideline that lines should not exceed 80 characters by using continuation lines if necessary

------------------------------------
<c:echo>
  a very long \    ; 'a very long line'
  line
</c:echo>
------------------------------------

<<el,EL>> is enabled by default:

------------------------------------
<c:echo>
  #{3 * 4}   ; '12'
</c:echo>
------------------------------------

The comment character sequence can be changed or disabled:

------------------------------------
<c:echo cl="#" ic="">
  #{3 * 4}   you cannot see me
  not ; any longer an inline comment!
</c:echo>
------------------------------------

You can use `\` as start of an escape sequence while however `\\` does not escape `\` from it\'s meaning. Consider:
------------------------------------
<c:echo>
  \#{3 * 4}            ; '#{3 * 4}'
  \\#{3 * 4}           ; '\#{3 * 4}'
  #{ '\\' }#{3 * 4}    ; '\12'
  #{ concat('\\',3*4)} ; '\12'
  ; comment            ; 
  \; not a comment     ; '; not a comment'
  \\; not a comment    ; '\; not a comment'
</c:echo>
------------------------------------

