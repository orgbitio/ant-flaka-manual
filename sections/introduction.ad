
[[introduction]]
== Introduction ==

In the world of http://en.wikipedia.org/wiki/Java_(programming_language)[Java], build scripts are traditionally written in http://en.wikipedia.org/wiki/Apache_Ant[Ant], recently also using http://en.wikipedia.org/wiki/Apache_Maven[Maven].

// When it comes to write a build script using Ant, it feels like using a Shell script in a rather awkward language (XML). Each Ant task solves a particular problem. This is similar to a Shell where you have this small masterpieces like `mkdir`, `cp`, `tar` plus some control structures to eventually being able to put the one big thing together.

Writing a project\'s build script is serious business. And so it is when using Ant. Ant does not provide you with any abstraction how the project needs to be build. There is no underlying logic. In fact you, the author, need to know what exactly needs to be done. Step by step. What\'s more, you have to use a rather unfriendly, sometimes even hostile, http://en.wikipedia.org/wiki/XML[XML] syntax. By default Ant provides you a rather large list of _tasks_ footnote::[http://ant.apache.org/manual/coretasklist.html] and _types_ footnote::[http://ant.apache.org/manual/conceptstypeslist.html]. Types are used to create data objects which can be used to feed tasks. Tasks are sequentially arranged to larger work units, called _targets_. Finally there are properties to establish a line of communication between work units and tasks. 

So writing a build script in Ant is like writing a Shell script where you have all those small masterpieces like `mkdir`, `cp`, `tar` available while decent control structures, like `if` and `for`, have been stripped off. This forces you, the author of a build script, to think in new categories and in rather creative ways. Ant scripts are therefore usually large, often work on the author\'s machine only and each author uses a different set of target and property names making it difficult to understand someone elses script.

Maven on the other side provides a high abstraction of building a project. Instead of describing how a project needs to be build, just describe the project detail and let Maven figures out what needs to be done. This is probably the reason why Maven got so much attention recently. Despite better knowledge I wrote that Maven figures out what needs to be done. That’s actually not quite true. In fact, Maven works generally fine when following conventions imposed by Maven. When not “en route”, Maven gets difficult as well. But even when following conventions, the number of options in Maven are, with the event of Maven\'s second incarnation, endless and question the idea of a declarative approach footnote::[Have a look at Maven\'s http://maven.apache.org/ref/current/maven-model/maven.html[POM] and checkout the never ending series of XML tags possible]. 

At the end, I found myself using Ant again. 

However, what I am missing in Ant is the full power of a programming language. Yes, I want to have conditionals, looping constructs and a decent exception handling. I want to have variables which I can set or remove for pleasure. I don\'t want to be restricted that such variables may carry strings only. Any data object must be allowed. Eventually I need a nice expression language to retrieve and calculate data in a simple yet elegant way. There is no need to have each and everything expressed in XML. And then I want to have some kind of higher abstraction which does the right thing most of the time. 

In summary, this is what Flaka is all about:

* Control Structures 
* Expressions
* Framework to do the _right_ thing

This pillars are Flakas approach to simplify the process of writing a build script with Ant. You are by no means forced to use all or any of those pillars. You can for example just use the programming tasks with or without EL while you don't need to get in touch with Flakas dependency handling instruments and neither with the framework. 

=== Where to go from here? ===

 * http://code.google.com/p/flaka/downloads/list[Download] Flaka and read the <<installation,installation page>>.
 * Jump right into chapter <<overview,Overview>> to get some ideas about elements provided by Flaka.  
 * Make sure to consult chapter <<el,EL, The Expression Language>>. It contains a lot of information on this enormous useful extension.
 * Have a closer look in the reference part of this manual for all the gory details.
 * Start writing build scripts using Flaka and give mailto:flaka@haefelinger.it[feedback].

=== About This Manual ===

This manual corresponds with *Flaka 1.01*.

There are four parts:

. An overview over Flaka\'s concepts are presented in <<part1,Part I>>.
. <<part2,Part II>>, is the reference part for all elementary control structures and for all of EL\'s gory details.
. In <<part3,Part III>>, special purpose tasks are presented. Most of this tasks are implemented with the help of tasks and concept shown in Part I.
. The last part, <<part4,Part IV>>, is about the installation of Flaka.

