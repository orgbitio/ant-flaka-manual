
[[task_trycatch,trycatch]]
=== trycatch ===

A task mirroring try-catch exception handling found in modern programming languages. The following snippet demonstrates the usage of trycatch:

--------------------------------------
 <c:trycatch property="reason">
   <try>
     <echo>one ..</echo>
     <echo>two ..</echo>
     <fail message="bang" />
     <echo>three ..</echo>
   </try>
   <catch>
     <echo>..caught : ${reason}</echo>
   </catch>
   <else>
     <echo>nothing exceptionell</echo>
   </else>
   <finally>
     <echo>..finally</echo>   
   </finally>
 </c:trycatch>
--------------------------------------

When executed, the following will be reported by Ant:

--------------------------------------
[echo] one ..
[echo] two ..
[echo] ..caught : bang
[echo] ..finally
--------------------------------------

==== Attributes ====

// cols=5
[cols="15%,10%,25%,50%"]
|===========================
| Attribute | Type | Default | Description 
| `property` | string | | Property that should hold the exception message 
| `reference` | string | `trycatch.object` | Reference to hold the exception object 
| _catch_.`type` | string | `*.BuildException` | A glob pattern to match the exception\'s type  
| _catch_.`match` | string | `*` | A glob pattern to match the exception\'s message 
|===========================

==== Elements ====

// cols=2
[cols="15%,85%"]
|=================================
| Element| Description 
| try | A task container to hold tasks and macros to be given a try
|catch |A task container to be executed if an exception gets thrown
|else| Task container executed if no exception is thrown in the `try` element
|finally | A task container to be executed in any case
|=================================

All elements are optional. There can be an arbitrary number of catch-clauses.

==== Behaviour ====

If a try-clause exists, then tasks within that clause are executed. If an exception is thrown by one of them, then ..

* If a property name is given, then that property will hold the message of the exception thrown. 
* If a reference name is given, then that reference will hold the exception object thrown. 
* All catch-clauses are tried in syntactical order whether a clause matches. 
* If there is a _matching_ catch clause, then all tasks in that matching clause are executed and all further catch-clauses are ignored. 

If no exception is thrown within the try-clause, then an optional else-clause will be executed.

An optional finally-clause is always executed, regardless of whether an exception gets thrown in a try-, else- or within a catch-clause. A finally-clause is especially executed in the absence of a try-clause.

An exception thrown in a try-clause for which a matching catch-clause exists, is assumed to be handled by the matching clause and therefore not propagated. An exception for which no matching clause exists, an exception thrown in an else-clause or in a matching catch-clause is propagated to an optional existing finally-clause. If no finally-clause exists, then the incoming exception will be propagated to the caller. The finally-clause propagates it\'s incoming exception to the caller.

An exception thrown in a catch-clause, in an else-clause or in a finally-clause overrides any previously existing exception when propagating. However, an exception thrown in a catch-, else- or finally-clause will neither update nor assign the property or reference.

A catch-clause can be decorated with a _type_ or _match_ argument to handle a specific exception class. Both arguments expect a glob expression. A catch-clauses matches if both, the type-argument and the match-argument do match. The type-argument is matched against exception\'s native type name. The match-argument is matched against the exception\'s message. Both default values ensure that a build exception thrown by Ant is caught while an implementation dependent exception passes. Consider:

-------------------------------------
<c:trycatch>
   <try>
      <fail message="houston, we have a problem" />
   </try>
   <catch match="*houston*">
     ; handle exceptions where the exception's message
     ; contains the word 'houston'
   </catch>
   <catch type="java.lang.*">
     ; handle Java runtime exceptions
   </catch>
   <catch>
     ; handle standard build exceptions
   </catch>
</c:trycatch>
-------------------------------------

When matching against the error message, be aware that the actual error message might be slightly different from the actual message given cause usually the error message contains also information about where the exception got thrown. It is therefore wise to accept any leading and trailing space.

  




