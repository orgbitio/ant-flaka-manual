


A compilation of words and their meaning in Flaka.

[[glossary_continuation_lines]]
=== Whitespace ===
Whitespace characters are the blank character (_SP_,` `), the horizontal tab character (_HT_,`\t`) and the form feed character (_FF_,`\f`). End-of-line characters are not considered whitespace in this document.

=== End-of-Line ===

A line-ending character sequence is either a carriage-return character followed by a line-feed character or the single line-feed character.

=== Continuation Lines ===

A continuation line is a sequence of characters with a non-escaped backslash character as last character before the end-of-line sequence. Tasks supporting continuation lines will accumulate the content of such a line with the _accumulated_ content of the following physical line. The continuation character, the line-ending character sequence and all immediate whitespace characters are not accumulated.

-------------------------------------
a\
 b\\\
c
-------------------------------------
 
Defines two logical lines: (1) `a b\\` and (2) `c`.

=== Comment Lines ===

A comment line is a sequence of character where the first non-whitespace character is the comment character - usually the character ';':

-------------------------------------
    ; a comment line
 no ; comment line
   \; not a comment line
-------------------------------------

Here, only the first line defines a comment line. The second line contains an inline-comment. When processed, comment-line get entirely removed from input up and including the end-of-line character sequence. In case a line must start with the comment-line character, then sequence `\;` can be used to do so. It must be noted, that escape character `\` has no other meaning, i.e. `\\` will not produce single character `\` but rather `\\`.

=== Inline Comments ===

A inline-comment is a sequence of characters starting with the inline-comment character and ending - while not including - the end-of-line sequence or end of input. Inline comments are discarded when processed. In case character `;` shall keep it\'s usual meaning, then `\;` can be used to do so.


[[glossary_property_reference]]
=== Property Reference ===
A reference to a http://ant.apache.org/manual/using.html#properties[property] is written as `${..}`. Property references are handled by the Ant property handler. If not changed, then `${x}` will be replaced by the value of property `x` if such a property exists. Otherwise, the reference will be left as is.

[[glossary_expression_reference]]
=== Expression Reference ===

A reference to an <<el>> expression is written as `#{..}`. <<el>> is not part of Ant and can thus only be handled by certain tasks. References may appear in attribute values or in text elements. Not all attributes can handled EL references and neither all text elements. If a attribute or text element can handle EL references, it is specifically mentioned.

[[glossary_base_folder]]
=== Base Folder ===

Relative files are usually meant to be relative to the current working directory. Not so in Ant, where a file is relative to the folder containing the build script of the current project. This folder is called the base directory or base folder. Ant defines property `basedir` to contain the (absolute) path name of this folder. When using <<el>> expressions you can use the empty string to create the base folder as file object, like in ` ''.tofile `.

See also http://ant.apache.org/manual/using.html#built-in-props[built-in-props] for a list of standard Ant properties.

