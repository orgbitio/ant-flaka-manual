=== export === 

Use this task to dump a file within the Flaka package to stdout or a file.  This task's usefulness is rather limited for public use, however this task is used to implement target [Targets#export export].  

==== Attributes ====
// cols=5
[cols="15%,3*11%,52%"]
|===========================
| Attribute | Type | Default | <<el>> | Description 
| `dst`     | string | (stdout) | no | The destination to dump the file to. If dst is `-` the file will be dumped to stdout. 
| `src`     | string | antlib.xml | no | The file within the package to export. By default, file antlib.xml is exported. 
| `tee`     | bool   | false     | no | If enabled, the file will be exported to src as well as to stdout (similar as standard UNIX command tee does). 
|===========================

==== Further Links ====
 * http://javadoc.haefelinger.it/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Export.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Export.java[Source]

=== find === 

Ant lacks a simple task to report all or certain files in a folder. This task lets you evaluate an arbitrary http://ant.apache.org/manual/CoreTypes/fileset.html[fileset] into a list of `file`s. Used in conjunction with <<tasks_for,task for>> enables you to print easily all files and properties of them. Of course, that generated list can also be used for other purposes.


-------------------------------------

<c:find var="filelist" type="f" />
<c:for var="file" in="filelist">
 <c:echo>
  #{file} has been last accessed at #{file.mtime}
 </c:echo>
</c:for>

-------------------------------------


==== Attributes ====

// cols=5
[cols="15%,3*11%,52%"]
|===========================
| Attribute | Type   | EL | Meaning | Default 
| dir       | string |  = | The directories to scan. | Basedir of build script (''.tofile) 
| type      | string |    | `f` to select files and `d` to select folders | all files and folders 
| var       | string |  r | The name of the variable to hold a list of scanned files or folders | null 
|===========================

==== Elements ====

This task implements a http://ant.apache.org/manual/CoreTypes/fileset.html[standard Ant fileset]. All elements of `fileset` are therefore legal elements of `find` as well.

==== Behaviour ====

This task scans all files and folders given by attribute `dir` into a variable given by `var`. If `var` is empty, then no scanning takes place. Attribute `var` may contain [EL#EL_References EL references] which are resolved. If a scanning takes place, then `var` will be created and contains, in any case, a list value.

Attribute `dir` may contain [EL#EL_References EL references] which are resolved. The so resolved string value must be a syntatically legal EL expression. This expression will then be evaluated. If the evaluated object is a list, then each list item will be scanned for files and folder, otherwise only the evaluated object. If such a object to be scanned is not already a file object, then stringized object is used to create the folder to be scanned. The following examples illustrate this behaviour:
// cols=2
[cols="20%,80%"]
|===========================
| Argument           | Same as 
| 'src'              | list('src'.tofile) 
| list('src','lib')  | list('src'.tofile,'lib'.tofile) 
|===========================

Attribute `type` is used to filter out unwanted files or folder from being scanned. If `type` is `f`, then only files are taken into account and when `d`, only folders matter. By default files and folders are accumulated.

==== Examples ====

Report all files in the working directory. Note that also files in sub folders are reported.


-------------------------------------

 <c:find var="filelist" type="f" />

-------------------------------------


Check whether a sub folder ending in '.jar' exists which is not a file but a directory.


-------------------------------------

 <c:find var="filelist" type="d">
   <include name="**/*.jar" />
 </c:find>

-------------------------------------

 

==== Further Links ====
 * http://javadoc.haefelinger.it/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Find.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Find.java[Source]

=== run-macro === 

A task to invoke a macro or task (or a list of them) dynamically. 


-------------------------------------

 <macrodef name="foobar" >
  <sequential>...</sequential>
 <macrodef>
 ..
 ..
 <foobar />                     -- conventional way of using macro foobar
 <c:run-macro name="foobar" />  -- dynamic way

-------------------------------------


The current version does not support calling macros or tasks with arguments. 

==== Attributes ====

// cols=5
[cols="15%,3*11%,52%"]
|===========================
| Attribute | Type | Default | EL | Description 
| `name`    | string |       | no | The name of the macro to run. Use whitespace chars to specify a list of names.
| `fail`    | bool   | false | no | Whether a exception shall be thrown if macro does not exist
|===========================

==== Further Links ====
 * http://javadoc.haefelinger.it/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Run-macro.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Run-macro.java[Source]


=== run-target === 

A task to invoke a target dynamically.

==== Attributes ====
// cols=5
[cols="15%,3*11%,52%"]
|===========================
| Attribute | Type | Default | <<el>> | Description 
| `name ` | string | | no | The name of the target to invoke. 
| `fail ` | bool | `false` | no | Fail if target does not exist 
|===========================

==== Example ====


-------------------------------------

 <target name="foobar">
   ..
 </target>
 ..
 <c:run-target name="foobar" />

-------------------------------------



==== Further Links ====
 * http://javadoc.haefelinger.it/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Run-target.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Run-target.java[Source]



=== create-target ===

Use this task to create a dynamic target within the current project. Usually targets are declaratively written within a build file. The following target


-------------------------------------

 <target name="foo" depends="bar" description="do foo">
   <foo-task />
 </target>

-------------------------------------


can also be written as


-------------------------------------

 <c:create-target name="foo" depends="bar" description="do foo" task="foo-task" />

-------------------------------------


Note: The current version allows only the specification of one task or macro within the body of the target to be created (like foo-task above).

==== Attributes ====
// cols=5
[cols="15%,3*11%,52%"]
|===========================
| Attribute | Type | Default | <<el>> | Description 
| `name` | string | | no | The name of the target to create. If override is false, an already existing target with that name is not created.
| `task` | string | | no | The task or macro to execute
| `description` | string | | no | The informal description of this target
| `depends` | string | | no | Targets to execute before this target
| `override` | bool | `false` | no | Whether to override an existing target.
|===========================


==== Further Links ====
 * http://javadoc.haefelinger.it/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Create-target.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Create-target.java[Source]
<hr/>


=== set-default-target === 

A task to define the project's default target. 

-------------------------------------

 <project xmlns:c="antlib:ant.epoline" default="this">
    <c:set-default-target name="foobar" override="true"/>
    ..
    <target name="foobar">
       ..
    </target>
 </project>

-------------------------------------

This example changes the default target to be called from this to foobar.


==== Attributes ====
// cols=5
[cols="15%,3*11%,52%"]
|===========================
| Attribute | Type | Default | EL  | Description 
| `name`    | string |       |  no | The name of the target 
| `fail`    | bool   | false |  no | Whether to throw an exception if target does not exist
| `override`| bool   | false |  no | Whether to override an already existing default target 
|===========================


==== Further Links ====
 * http://javadoc.haefelinger.it/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Set-default-target.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Set-default-target.java[Source]


=== xmlmerge === 

A simple task to merge XML files. 

==== Attributes ====
// cols=5
[cols="15%,3*11%,52%"]
|===========================
| Attribute | Type | Default | <<el>> | Description 
| `dst` | string | - | no | The file to write to. Any intermediate folders are created. writes to stdout if empty string or argument - is given.
| `src` | string | | no | A file or folder argument. If a folder is given, then any file therein matching a given pattern is merged, otherwise the file given. A relative argument is interpreted as being relative to the current working directory.
| `pattern` | regex | `.*\\.xml`| no | The pattern to apply when matching files to be merged. The pattern can be a regular expression 
| `root` | | string | no | By default the root tag of the first element will be the root tag for the merged content. Use attribute root to specify a different root tag.
|===========================

==== Behaviour ====

Assume that folder xmldir contains two files x.xml and y.xml where x.xml looks like


-------------------------------------

 <x>
  <x>This is X/x</x>
 </x>

-------------------------------------


and where y.xml looks similar. Then the following invocation gets:


-------------------------------------

 <c:xmlmerge dst = "-" src = "xmldir" pattern = "*.xml" root = "myroot" />
 <?xml version="1.0" encoding="UTF-8"?>
 <myroot>
 <X>
   <x>This is X/x</x>
 </X>
 <Y>
   <y>This is Y/y</y>
 </Y>
 </myroot>

-------------------------------------


The same setup as before gives, when no root element is applied, the following:


-------------------------------------

 <c:xmlmerge dst = "-" src = "xmldir" pattern = "*.xml" />
 <?xml version="1.0" encoding="UTF-8"?>
 <X>
   <x>This is X/x</x>
   <Y>
     <y>This is Y/y</y>
   </Y>
 </X>

-------------------------------------


==== Further Links ====
 * http://javadoc.haefelinger.it/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/XmlMerger.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/XmlMerer.java[Source]

=== property-by-regex === 

A task to compose a property based on existing properties.

The new property is composed by searching for property names matching a given regular expression. Then the new property is created by  concatenating the value of each matching property using a separator of choice.

==== Attributes ====
 * property<br />The name of the property to create
 * regex<br />The regular expression. 
 * sep<br />The separator to use when concatenating
==== Example ====

Assume that the following properties are defined:


-------------------------------------

 depot.1.url = http://depot/component
 depot.2.url = http://depot/3rdparty
 depot.3.url = http://depot/externals

-------------------------------------


Then


-------------------------------------

 <c:property-by-regex property="depot.csv" regex="depot\.\d+\.url" />

-------------------------------------


creates property


-------------------------------------

 depot.csv = http://depot/component,http://depot/3rdparty,http://depot/externals

-------------------------------------


==== Further Links ====
 * http://javadoc.haefelinger.it/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Property-by-regex.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Property-by-regex.java[Source]

=== scandeps ===

A task to scanning for dependencies in files.


-------------------------------------

<c:scandeps var="mydeps">
  <include name="build.xml" />
</c:scandeps>

-------------------------------------


Example above searches for dependencies in file `build.xml` in the [Glossary#Base_Folder project's base folder]. The list of dependencies is assigned with variable `mydeps`. 

==== Attributes ====
// cols=5
[cols="15%,3*11%,52%"]
|===========================
| Attribute | Type   | Default   | EL  | Description 
| var       | string |           | #{} | The name of the variable to hold dependencies 
| dir       | string | ''.tofile | yes | The root folder to use when scanning files 
| debug     | bool   | false     |  no | Turn on extra debug information 
|===========================

==== Elements ====

This task is a implicit http://ant.apache.org/manual/CoreTypes/fileset.html[fileset] and may thus contain any elements which can be applied to a fileset. 

==== Behaviour ====

If attribute `var` is not used, then no scanning for dependencies takes place and no warning will be issued (except when `debug` has been enabled). If a variable is used, then a list of dependencies will be assigned in any case. If no dependencies are found, the list will be empty.

Attribute `dir` is evaluated as <<el>> expression. If the result is a file object, the object is taken as the root for scanning files. If `dir` is not used, then the current [Glossary#Base_Folder] is used as root.

This task may take any elements which are applicable for a http://ant.apache.org/manual/CoreTypes/fileset.html[fileset] type. If no elements are used, then all files and folders beneth `dir` are scanned. Otherwise the elements applied will limit the scan for specific files or folders.

A dependency is just recognized by it's element name regardless any namespace. Therefore something like


-------------------------------------

 <dependency />
 <x:dependency>

-------------------------------------


will be accepted as dependency when scanning.

==== Further Links ====
 * http://javadoc.haefelinger.it/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/ScanDeps.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/ScanDeps.java[Source]


