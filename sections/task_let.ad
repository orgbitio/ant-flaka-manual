

[[task_let,let]]
=== let ===
XML is not particular easy to read for humans. When assigning a couple of variables and properties, this becomes obvious. This elementary task allows to set multiple variables and properties in one go. In addition, comments and continuation lines are allowed for additional readability and comfort. For example:

--------------------------------------
  <c:let>
    f = 'my/path'
    ; turn f into a file object
    f = file(f)
    b = f.isdir ? true : false
    ; assign a *property* 
    p := 'hello world'
    ; override a property if you dare
    p ::= "HELLO \
    WORLD"
  </c:let>
--------------------------------------

In this example, variable `f` is first assigned to be a string object (`'my/path'`). The comment line, the one starting with character `;`, tells what the next line is going to do: turn `f` into a file object which can then be used for further processing. Here we create variable `b` which becomes `true` if `f` is a directory and `false` otherwise.

Character `=` is used to create or set a variable while `:=` indicates to create a property instead. If such a property already exists, it will not be changed in accordance with Ant\'s standard behaviour. If you however dare to override a property, then you may do so using `::=` as the last example shows. 

Notice that the right side of `=`, `:=` and `::=` is evaluated as EL expression while the left side is expected to constitute a valid identifier for a variable or property.


==== Attributes ====

|=======================
| Attribute | Type | Default    | Description 
| `cs`      | string  | `;`     | The sequence starting a comment-line
| `ics`     | string  | `;`     | The sequence starting a inline-comment
| `cl`      | boolean | `true`  | Whether continuation lines shall be supported
|=======================

Use an empty attribute value ("") to turn comments off.

==== Elements ====

This task accepts an implicit text element. 

==== Behaviour ====

In a first step, physical lines are processed into logical lines by taking continuation lines into accout. Then, any comments and lines containing only whitespace charactes are stripped from input.

Then, each line is taken apart into a key and value by using the first occurrance of `=`, `:=` or `::=`.  as breaking point. Leading and trailing whitespace characters are removed from key and value. Then, property and EL references are resolved . Eventually the value part is evaluated as EL expression and stored as variable or property. When stored as property, the evaluated value will be coerced into a string.

==== Then meaning of `null` and _void_ ====

This task can also be used to _remove_ variables and properties. The following table gives an overview of the meaning of `null` and _void_ footnote::[_void_ means that the absence of any characters] on the right side of an assignment:
|=======================
| Assignment Type| Evaluated Value | Description 
| `=`        | `null`     | Remove variable if existing, else do nothing
| `=`        | _void_     | Same as `= null`
| `:=`       | `null`     | Nothing
| `:=`       | _void_     | Same as `:= null` 
| `::=`      | `null`     | Remove property 
| `::=`      | _void_     | Same as `::= null` 
|=======================

==== Examples ====

To start with, some basic examples.
--------------------------------------
<c:let>
 ; a comment line
 ; variable x will hold integer 12
 x   = 3 * 4
 ; property p will hold string '12'             
 p  := 3 * 4
 ; ignored, cause property p exists already
 p  := 'twelve' 
 ; override property p to hold string value '12'
 p ::= 'twelve'
</c:let>
--------------------------------------

It is perfectly legal to use property or variable references. Variables and properties created within `let` can also be used. Be aware that property references are resolved _before_ EL references. Consider:
--------------------------------------
<property name="a" value="a" />
<c:let>
 ; variabe v becomes the string object 'bar' and property p
 ; becomes 'foobar'
 v  = 'b${a}r'
 p := 'foo#{v}'
 ; property- and El-references can be used on both sides. Here we
 ; override property 'a' to become string value `bar`
 ${a} ::= '#{v}'
 ; This will not work as planned cause there is no property
 ; with that weired name '#{v}'.
 f = ${#{v}}
</c:let>
--------------------------------------

The following kind of meta programming will _not_ work for `let` cause property and EL references are resolved after the logical line has been broken up in a key and value part:
--------------------------------------
<c:let>
  ; This example will NOT work as planned
  assigntype := condition ? '=' : ':='
  key ${assigntype} el-expr
</c:let>
--------------------------------------





