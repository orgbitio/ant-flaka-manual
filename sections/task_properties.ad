

[[task_properties,properties]]
== properties ==


A task to set multiple properties in one go. It is typically used to _inline_ properties otherwise written in an additional properties file. Thus using this task reduces the clutter on your top level directory:

-------------------------------------

<c:properties>
  ; this is \
  a comment

  ; assume that variable 'foo' has been defined here and that
  ; foo.name resolves into 'foo', then the next line will set
  ; property foo to be the string `foo'.
  foo     = #{foo.name}
  ; next lines creates property `foobar' to be the string `foobar'.
  foobar  = ${name}bar
</c:properties>

-------------------------------------



=== Attributes ===

|| Attribute || Type    || Default || EL || Description ||
|| debug     || boolean || `false` || no || Turn extra debug information on || 
|| comment   || String  || `;`     || no || The character that starts a comment line || 

=== Elements ===

This task accepts a implicit text element.

=== Behaviour ===

This task is similar to <<tasks_let,let>>. The difference is that this task only allows to define properties while  <<tasks_let,let>> also supports the creation of variables. Furthermore, the right side of `=` will be literally taken as string value. This is different from <<tasks_let,let>> where the right side will be additionally evaluted as <<el>> expression. The following example defines each property foobar, once done with task  <<tasks_let,let>> and once with this _properties_ task:

-------------------------------------

<c:let>
  foobar := 'foobar'
</c:let>
<c:properties>
  foobar = foobar
</c:properties>

-------------------------------------

Notice the usage of the quote character `'` in the former example and the absence of it in the latter.

Task _properties_ supports, like task <<tasks_let,let>> does, continuation lines and comments. Furthermore, variable references `#{..}` and property references `${..}` are resolved on both sides of `=`.

If the right side is empty, then no property will be created and an existing property will not be changed. If the right side is `null`, a property with string value `null` will be assigned if the property does not already exist (this is very much different than when using task [#let let] to create properties.

Leading and trailing (!) whitespace characters are ignored. This is different from standard Ant where trailing whitespace is significant (and responsible for unexpected and hard to track script behaviour).

=== Further Links ===
 * http://javadoc.haefelinger.it/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Properties.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Properties.java[Source]
