

[[task_continue,continue]]
=== continue ===

A task mirroring a continue statement. When used within a <<tasks_for,for>>-loop, the loop will be continued with the next loop item (i.e. any statements after task continue are ignored). If this task is used outside of a for-loop, a build exception will be thrown.

--------------------------------------
 <c:for var="i" in=" list(1,2,3,4,5,6) ">
   <c:when test=" i > 3 ">
     <c:continue />
   </c:when>
   <c:echo>i = #{i}</echo>
  </c:for>
--------------------------------------

This would print:

--------------------------------------
[c:echo] i = 1
[c:echo] i = 2
[c:echo] i = 3
--------------------------------------

==== Attributes ====
// cols=5
[cols="15%,3*11%,52%"]
|===========================
| Attribute | Type | Default | <<el>> | Description 
| `test`    | string | -     | expr | Continue loop when <<el>> expression evaluates to `true` 
| `if`      | string | -     | #{}  | Continue if property exists 
| `unless`  | string | -     | #{}  | Continue if property does not exist 
|===========================

==== Behaviour ====

When used without any attributes, the surrounding <<tasks_for,for>> or <<tasks_while,while>> be continued while following tasks or macros are ignored in the current iteration step. When used with attributes, then the loop will be continued if at least one attribute evaluates to `true`. Otherwise, the subsequent tasks or macros are executed.

The example given above can thus be shortened to 
--------------------------------------
 <c:for var="i" in=" list(1,2,3,4,5,6) ">
   <c:continue test=" i > 3 " />
   <c:echo>i = #{i}</echo>
</c:for>
--------------------------------------

==== Further Links ====
 * http://javadoc.haefelinger.it/it.haefelinger.flaka/1.01/it/haefelinger/flaka/Continue.html[Javadoc] 
 * http://code.google.com/p/flaka/source/browse/tags/1.01/src/it/haefelinger/flaka/Continue.java[Source]
 * Task <<tasks_for,for>> 
 * Task <<tasks_break,break>>


