
[[task_switch,switch]]
=== switch ===

Task `switch` provides text based pattern matching. An illustrative example:

--------------------------------------
 <c:switch value="${value}">
  <re expr="(+|-)?(0|[1-9]\d*)" var="g">        (1)    
    <c:echo>
      integer with absolute value: #{g[2]}
    </c:echo>
  </re>
  <glob expr"*.jar">                            (2)
   <echo>It's a -- jar!</echo>
  </glob>
  <cmp eq="foo" lt="foo">                       (3)
    <!--  ${val} is less or equals "foo" -->
  </cmp>
  <otherwise>
    <! none of the above clauses matched -->
  </otherwise>
 </c:switch>
--------------------------------------

This example demonstrates, how a given textual value can be compared using (1) regular expressions, (2) using glob expression or (3) compared for equality or alphabetical order. Why providing alternatives for regular expressions? Cause the biggest drawback of regular expressions is their complexity. Compare this two variations to check whether a string value ends in `.jar`:

--------------------------------------
<re="(.*)\.jar" var="g">
  <c:echo>
    basename is #{g[1]}.
  </c:echo>
</re>

<glob="*.jar" var="g">
  <c:echo>
    filename is #{g[0]}.
  </c:echo>
</glob>
--------------------------------------

The latter one, the glob expression, is much easier to grasp. There, `*` just stands for a sequence of arbitrary characters. In most pattern recognitzion tasks, this is all what is needed to get going. If more power is required, then regular expressions are the tool to be applied. Eventually `cmp` allows for simple text comparison without any meta-characters. It also allows to check whether the input string is before or after a given test string.

==== Attributes ====
// cols=5
[cols="20%,2*11%,58%"]
|===========================
| Attribute | Type   | Default | Description 
| `value`   | string |    ""   | The string value that needs to be matched against.
| `var`     | string |       - | Save details of this match as `matching object`. 
| `not`     | bool | false | Whether to invert the test result or not.
| `find`    | bool | false | Whether to match the input value partially (true) or as a whole (false) 
| `debug`      | bool  | false | Whether to turn on extra debug information 
| `literally` | bool | false | Whether to take an invalid expression literally or not.
| `ignorecase` | bool | false  | Whether to enable case-insensitive matching. 
| `comments`   | bool | false  | Whether to allow whitespace and comments in an _regex_. 
| `dotall`     | bool | false  | Whether literal `.` matches _any_ character.
| `unixlines`  | bool | false  | Whether _only_ `nl` is accepted as line terminator 
| `multiline`  | bool | false | Whether `^` and `$` shall _only_ match begin and end of input
| _re_.`expr`  | string |    | Element `matches`: Specify a matching pattern as regular expression. 
| _glob_.`expr` | string |   | Element `matches`: Specify a matching pattern as glob expression 
| _cmp_.`lt` | string | -  | `<cmp/>`: Specify a matching pattern as glob expression 
| _cmp_.`eq` | string | -  | `<cmp/>`: Specify a matching pattern as glob expression 
| _cmp_.`gt` | string | -  | `<cmp/>`: Specify a matching pattern as glob expression 
|===========================

Attribute *value* defines the test (string) value. EL <<el>> references can be used. Leading and trailing whitespace is always removed. A test of a clause will always evaluate to `false` if this attribute is not set. It is legal however to have a switch without this attribute.

The default settings of attributes *var*, .., *debug* have been shown in table above. A default setting can be changed by using the attribute on switch element level. Those default settings are inherited by each clause-element - `<re/>`, `<glob/>` or `<cmp/>`. Each attribute *var*,.., *debug* can be applied on clause-elements where they override their inherited setting:

--------------------------------------
 <c:switch .. not="true">
  ..
  <cmp eq="foo" lt="foo" not="false">    
    <!-- still less then "foo" or equal "foo" -->
  </cmp>
 </c:switch>
--------------------------------------

Use attribute *var* to specify the name of an EL variable to hold match details like the number of capturing groups, the value of the first capturing group and the like. See <<el_matcher_properties,matcher properties>> for a list of available properties; see also below for examples. The attribute value may contain EL references.

Attribute *not* can be used to invert the result of a test match.
--------------------------------------
 <c:switch ..>
  <cmp eq="foo" lt="foo" not="true">    
    <!-- greater then "foo"  -->
  </cmp>
 </c:switch>
--------------------------------------

When applying a regular or glob expression on a test value, then by default, the expression must describe the whole test value for a sucessful match. Attribute *find* can be used to change this behaviour. Set to `true`, then a sucessful match is given if the expression describes a part of the input string:

--------------------------------------
 <c:switch value="foobar">
  <glob find="true" expr="foo">    
    <!-- matches foobar -->
  </glob>
 </c:switch>
--------------------------------------

Attribute *find* does not apply on clause `cmp`.

Use attribute *debug* to enable extra output of debug information on your attached standard error stream, bypassing Ant's logging mechanics.

The semantics of attribute *literally* varies depending on it's context. A build failure is thrown if an illegal regular expression pattern - like `*` - is seen. If literally is enabled, the regular expression string is taken literally instead, no exception is thrown while a warning message is reported. If attribute *literally* is enabled in context of a glob expression, then any meta characters are taken as regular characters. Attribute *literally* has no meaning in the context of clause `cmp`. 

The remaining part of this section describes attributes *ignorecase*, .., *multiline*. This attributes can be used to change the characteristics of the underlying regular expression engine. Modern regular expression engines also allow to their characteristics on the fly by using embedded flags. Embedded flag alternatives are also listed.

Attribute *ignorecase* can be used to enable case-insensitive matching. This attribute also applies to clause `cmp`. Case-insensitive matching is enabled on the US-ASCII charset only. Unicode-aware matching can not be enabled. The embedded flag expression equivalent flag of this attribute is `(?i)`.

Use attribute *comment* to enrich regular expressions by comments. When set, whitespace is ignored and embedded comments starting with # are ignored until the end of a line. Comments mode can also be enabled via the embedded flag expression `(?x)`.

Attribute *dotall* can be used to change the characteristics of metacharacter `.`, the dot. By default all characters but line terminators are matched by this meta-character. When set, all characters are matched. The embedded equivalent is `(?s)` . 

Use attribute *unixlines* to let the regular expression engine accept `\n` as line termination character. The embedded flag expression is `(?d)`. 

Attribute *multiline* changes the characteristics of meta-character `^` and `$`. By default they match at the beginning and the end of the entire input sequence. When set, they match just after and just before a line termination character. Multiline mode can also be enabled via the embedded flag expression (?m). 


==== Elements ====

// cols=3
[cols="15%,1*35%,50%"]
|===========================
| Element     | Cardinality | Description 
| `re`        | arbitrary  | Regular expression based test clause.
| `glob`      | arbitrary  | Glob expression based test clause.
| `cmp`       | arbitrary  | Clause for basic equality and ordering.
| `otherwise` | arbitrary  | Task container, executed if all tests failed.
| `matches`   | arbitrary  | Legacy test clause (deprecated).
|===========================

Element *re* is a task container. Embedded tasks are conditionally carried out. The condition is satisfied if the regular expression expressed in attribute *expr* matches the given input value _switch_.`value`. If attribute *expr* is not used, then the condition is satisfied. Use attribute *not* to negate the condition. Be aware of the following pathological case:
--------------------------------------
 <c:switch value=..>
  <re>
    <!-- always carried out -->
  </re>
 <c:case>
--------------------------------------

Element *glob* is a task container similar to element *re*. The only difference is, that attribute *expr* is interpreted as glob expression instead of a regular expression as in *re*.

Element *cmp* is a task container similar to element *re* and *glob*. This element supports attributes *lt*, *eq* and *gt* in addition to inherited attributes. Embedded tasks are carried out if each comparison in each used attribute evaluates to true. If none of the attributes is used, then the condition is also satisfied.

Element *otherwise* does not express a test clause and does not support any attributes. This element is a task container. Embedded tasks are carried out if attribute _switch_.`value` has been set and if none of the test-clauses matched. This element can be present more than once. Elements are carried out in syntatical order.

Element *default* is an alias name for element `otherwise`.

==== Behaviour ====

String attribute `value` is applied against a series of _case_-clauses in their syntactical order. Elements `re`, `glob`, `cmp` and `matches` are _case_-clauses. If a clause matches, then tasks associated with the matching clause are carried out and no further clauses are will be tested. If no case-clause matches, then all optional available `otherwise` elements are carried out in their syntactical order.

==== Examples ====

Tests based on regular expressions
--------------------------------------
<c:switch value=" foobar ">
   <re expr="^foobar$" />     ; matches 
   <re expr="foobar" />       ; matches
   <re expr="foo" />          ; no
   <re expr="foo" find="true" ; matches
   <re expr="#{'foobar'}"     ; matches
</c:switch>
--------------------------------------

The following example shows how to utilize matcher properties:
--------------------------------------
<c:switch value=" foobar ">
   <re expr="^(.*)(b.*)$" var="m">
     <echo>
       #{ m          }   ; 'foobar'
       #{ m[0]       }   ; 'foobar'
       #{ m.start    }   ; 0
       #{ m.end      }   ; 5
       #{ m.groups   }   ; 2
       #{ m.pattern  }   ; '^(.*)(b.*)$'
       #{ m[1]       }   ; 'foo'
       #{ m[2]       }   ; 'bar'
       #{ m[1].end   }   ; 2
       #{ m[2].start }   ; 3
     <echo>
   </re>
</c:switch>
--------------------------------------

Tests using glob expressions
--------------------------------------
<c:switch value=" foobar ">
   <glob expr="foobar" />          ; matches 
   <glob expr="f*r" />             ; matches
   <glob expr="foo" />             ; no
   <glob expr="foo" find="true" /> ; matches
   <glob expr="#{'foobar'}" />     ; matches
</c:switch>
--------------------------------------

Matcher properties can also be used when using glob expressions. However, since glob expressions do not have enough semantics to express capturing groups, their use is limited. Consider:

--------------------------------------
<c:switch value=" foobar ">
   <glob expr=" f*r " var="m">
     <echo>
       #{ m          }   ; 'foobar'
       #{ m[0]       }   ; 'foobar'
       #{ m.start    }   ; 0
       #{ m.end      }   ; 5
       #{ m.groups   }   ; 0
       #{ m.pattern  }   ; 'f.*b'
       #{ m[1]       }   ; ''
     <echo>
   </glob>
</c:switch>
--------------------------------------

Finally use element `cmp` to do text based comparision in absence of any meta characters. Since element `cmp` is not based on an regular expression engine, matcher properties are not available. Consider

--------------------------------------
<c:switch value=" foobar ">
   <cmp eq=" foobar " />           ; matches
   <cmp eq=" f*r "    />           ; no
   <cmp eq=" foo " find="true"/>   ; no
</c:switch>
--------------------------------------

Element `cmp` can be used to sort text in alphabetical order. Consider:

--------------------------------------
<c:switch value=" b ">
   <cmp eq=" b " />           ; true
   <cmp lt=" c " />           ; true
   <cmp gt=" a " />           ; true
   <cmp lt=" a " eq="b" />    ; true
</c:switch>
--------------------------------------

==== Pathologicals ====

Switch has been designed to be rather tolerant. No elements are required in which case of course nothing happens.
--------------------------------------
<c:switch />
<c:switch value="foobar" />
--------------------------------------

Arbitrary `otherwise` elements might be present. In addition, `otherwise` elements are carried out if not _case_-clause matches. 
--------------------------------------
<c:switch>
 <otherwise>
  <echo>first otherwise</echo>
 </otherwise>
 <otherwise>
    <echo>second otherwise</echo>
 </otherwise>
</c:switch>
--------------------------------------

Being executed, it would print 
--------------------------------------
[echo] first otherwise
[echo] second otherwise
--------------------------------------


